<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Microsoft.Data.Visualization.VisualizationControls">
  <ResourceDictionary.MergedDictionaries>
    <x:Static Member="local:ChromelessWindowBase.MainThemeDictionary"/>
    <x:Static Member="local:ChromelessWindowBase.StaticallyThemedTemplatesDictionary"/>
    <ResourceDictionary Source="ChromeButtonBaseStyles.xaml"/>
    <ResourceDictionary Source="Converters.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <Style x:Key="ChromeHelpButton" BasedOn="{StaticResource ChromeButtonBase}" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="PART_Backgrid">
            <Image Name="PART_Image" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"
                   Source="/VisualizationControl;component/Images/help_normal.png" RenderTransformOrigin="0.5,0.5">
              <UIElement.RenderTransform>
                <ScaleTransform ScaleX="{Binding Converter={StaticResource StringToIntConverter}, ConverterParameter={x:Static local:Resources.HelpIcon_ScaleX}}"/>
              </UIElement.RenderTransform>
            </Image>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/help_hover.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#D3F0E0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/help_pressed.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#86BFA0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/help_disabled.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChromeFullScreenButton" BasedOn="{StaticResource ChromeButtonBase}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="PART_Backgrid">
            <Image Name="PART_Image" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"
                   Source="/VisualizationControl;component/Images/fullscreen_normal.png"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/fullscreen_hover.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#D3F0E0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/fullscreen_pressed.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#86BFA0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/fullscreen_disabled.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChromeMaximizeButton" BasedOn="{StaticResource ChromeButtonBase}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="PART_Backgrid">
            <Image Name="PART_Image" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"
                   Source="/VisualizationControl;component/Images/maximize_normal.png"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/maximize_hover.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#D3F0E0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/maximize_pressed.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#86BFA0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/maximize_disabled.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ChromeMinimizeButton" BasedOn="{StaticResource ChromeButtonBase}"
         TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Name="PART_Backgrid">
            <Image Name="PART_Image" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"
                   Source="/VisualizationControl;component/Images/minimize_normal.png"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/minimize_hover.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#D3F0E0"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/minimize_pressed.png"/>
              <Setter TargetName="PART_Backgrid" Property="Panel.Background" Value="#86BFA0"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/minimize_disabled.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FirstPageButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Image Name="PART_Image" Source="/VisualizationControl;component/Images/GreenPager16x16.png"
                 FlowDirection="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type FrameworkElement}}, Path=FlowDirection}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerHover16x16.png"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerClick16x16.png"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerDisabled16x16.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="LastPageButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Image Name="PART_Image" Source="/VisualizationControl;component/Images/GreenPager16x16.png"
                 RenderTransformOrigin="0.5,0.5"
                 FlowDirection="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type FrameworkElement}}, Path=FlowDirection}">
            <UIElement.RenderTransform>
              <ScaleTransform ScaleX="-1"/>
            </UIElement.RenderTransform>
          </Image>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerHover16x16.png"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerClick16x16.png"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenPagerDisabled16x16.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PreviousPageButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Image Name="PART_Image" Source="/VisualizationControl;component/Images/GreenWind16x16.png"
                 FlowDirection="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type FrameworkElement}}, Path=FlowDirection}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindHover16x16.png"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindClick16x16.png"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindDisabled16x16.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NextPageButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Width" Value="16"/>
    <Setter Property="FrameworkElement.Height" Value="16"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Image Name="PART_Image" Source="/VisualizationControl;component/Images/GreenWind16x16.png"
                 RenderTransformOrigin="0.5,0.5"
                 FlowDirection="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type FrameworkElement}}, Path=FlowDirection}">
            <UIElement.RenderTransform>
              <ScaleTransform ScaleX="-1"/>
            </UIElement.RenderTransform>
          </Image>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindHover16x16.png"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindClick16x16.png"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="PART_Image" Property="Image.Source"
                      Value="/VisualizationControl;component/Images/GreenWindDisabled16x16.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StatusBarButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Margin" Value="5,0"/>
    <Setter Property="FrameworkElement.Width" Value="32"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF439467" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled"/>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Panel.Background>
                <SolidColorBrush x:Name="Background" Color="Transparent"/>
              </Panel.Background>
              <ContentPresenter/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FilterBarButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FrameworkElement.Margin" Value="2,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF439467" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled"/>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Panel.Background>
                <SolidColorBrush x:Name="Background" Color="Transparent"/>
              </Panel.Background>
              <ContentPresenter/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FilterBarToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Margin" Value="2,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF439467" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled"/>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Unchecked"/>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="CheckState" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Panel.Background>
                <SolidColorBrush x:Name="CheckState" Color="Transparent"/>
              </Panel.Background>
              <Border>
                <Border.Background>
                  <SolidColorBrush x:Name="Background" Color="Transparent"/>
                </Border.Background>
                <ContentPresenter/>
              </Border>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StatusBarToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FrameworkElement.Margin" Value="7,0"/>
    <Setter Property="FrameworkElement.Width" Value="32"/>
    <Setter Property="FrameworkElement.Height" Value="32"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF439467" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled"/>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CheckStates">
                <VisualState x:Name="Unchecked"/>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="CheckState" Storyboard.TargetProperty="Color" To="#FF006432" Duration="0"/>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Panel.Background>
                <SolidColorBrush x:Name="CheckState" Color="Transparent"/>
              </Panel.Background>
              <Border>
                <Border.Background>
                  <SolidColorBrush x:Name="Background" Color="Transparent"/>
                </Border.Background>
                <ContentPresenter/>
              </Border>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="StatusBarIconImageStyle" TargetType="{x:Type Image}">
    <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
  </Style>
  <Style x:Key="ListBoxItemPopUpStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="true"/>
  </Style>
</ResourceDictionary>