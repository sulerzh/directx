<UserControl x:Class="Microsoft.Data.Visualization.VisualizationControls.DecoratorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Microsoft.Data.Visualization.VisualizationControls"
             xmlns:wpfEx="clr-namespace:Microsoft.Data.Visualization.WpfExtensions;assembly=WpfExtensions"
             IsKeyboardFocusWithinChanged="DecoratorIsKeyboardFocusWithinChanged" Loaded="DecoratorLoaded"
             wpfEx:SizeObserver.Observe="true" Height="{Binding Model.Height}" Width="{Binding Model.Width}"
             wpfEx:SizeObserver.ObservedWidth="{Binding Model.ActualWidth, Mode=OneWayToSource}"
             wpfEx:SizeObserver.ObservedHeight="{Binding Model.ActualHeight, Mode=OneWayToSource}">
    <FrameworkElement.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="..\Styles\Includes.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <ControlTemplate x:Key="DraggableArea">
                <Border Background="#00FFFFFF"/>
            </ControlTemplate>
            <ControlTemplate x:Key="DecoratorResizeGrip" TargetType="{x:Type ResizeGrip}">
                <Ellipse Fill="{DynamicResource MetroBackground}" StrokeThickness="3"
                 Stroke="{DynamicResource MetroBaseGreen}" Width="16" Height="16"/>
            </ControlTemplate>
            <ContextMenu x:Key="LegendContextMenu" ItemsSource="{Binding ContextCommands}">
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}">
                        <Setter Property="MenuItem.Command" Value="{Binding Command}"/>
                        <Setter Property="HeaderedItemsControl.Header" Value="{Binding Header}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                <Setter Property="Control.Template" Value="{StaticResource ContextMenuSeparatorTemplate}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ContextMenu>
        </ResourceDictionary>
    </FrameworkElement.Resources>
    <Grid MouseLeave="ContentMouseLeave" MouseEnter="ContentMouseEnter" Background="#00FFFFFF"
        wpfEx:GridEx.RowDefs="Auto,*"
        Visibility="{Binding Model.IsVisible, Converter={StaticResource HiddenIfFalseConverter}}">
        <ContentControl MouseEnter="ContentMouseEnter" x:Name="Body" IsTabStop="false" Margin="10,2,10,10" Grid.Row="1"
                    ContextMenu="{StaticResource LegendContextMenu}" Content="{Binding Model.Content}"/>
        <Grid Row="0" Margin="8,0" wpfEx:GridEx.ColDefs="*,Auto"
          Visibility="{Binding ShowAdornerUI, Converter={StaticResource HiddenIfFalseConverter}}">
            <Border Grid.ColumnSpan="2" Background="#FF217346" BorderBrush="#FF217346"/>
            <Thumb DragDelta="OnDragDelta" Grid.ColumnSpan="2" Template="{StaticResource DraggableArea}"
             ContextMenu="{StaticResource LegendContextMenu}"/>
            <StackPanel Grid.Column="1" Orientation="Horizontal">
                <Button Style="{StaticResource StatusBarButtonStyle}" Width="24" Height="24" Margin="0"
                ToolTip="{x:Static local:Resources.Decorator_CloseTooltip}"
                AutomationProperties.AutomationId="DecoratorCloseButton"
                AutomationProperties.Name="{x:Static local:Resources.Narrator_Close}" IsTabStop="true"
                Command="{Binding CloseCommand}">
                    <Image Height="16" Width="16" RenderOptions.BitmapScalingMode="NearestNeighbor"
                 Source="/VisualizationControl;component/Images/close_white.png"/>
                </Button>
            </StackPanel>
        </Grid>
        <Border MouseEnter="ContentMouseEnter" Grid.Row="1" BorderThickness="2" BorderBrush="#FF217346"
            Margin="8,0,8,8"
            Visibility="{Binding ShowAdornerUI, Converter={StaticResource HiddenIfFalseConverter}}"/>
        <Grid Row="1" wpfEx:GridEx.ColDefs="Auto,*,Auto" wpfEx:GridEx.RowDefs="Auto,*,Auto"
          Visibility="{Binding ShowAdornerUI, Converter={StaticResource HiddenIfFalseConverter}}">
            <ResizeGrip MouseLeftButtonDown="Grip_MouseLeftButtonDown" MouseLeftButtonUp="Grip_MouseLeftButtonUp"
                  MouseDoubleClick="Grip_MouseDoubleClick" MouseMove="Grip_MouseMove" Name="TopLeftGrip"
                  AutomationProperties.AutomationId="TopLeftReSizeGrip" Grid.Column="0" Grid.Row="0"
                  Margin="0,-8,0,0" VerticalAlignment="Bottom" Template="{StaticResource DecoratorResizeGrip}"
                  KeyboardNavigation.IsTabStop="false"/>
            <ResizeGrip MouseLeftButtonDown="Grip_MouseLeftButtonDown" MouseLeftButtonUp="Grip_MouseLeftButtonUp"
                  MouseDoubleClick="Grip_MouseDoubleClick" MouseMove="Grip_MouseMove" Name="BottomRightGrip"
                  Grid.Column="2" Grid.Row="2" AutomationProperties.AutomationId="BottomRightReSizeGrip"
                  VerticalAlignment="Bottom" Template="{StaticResource DecoratorResizeGrip}"
                  KeyboardNavigation.IsTabStop="false"/>
        </Grid>
    </Grid>
</UserControl>