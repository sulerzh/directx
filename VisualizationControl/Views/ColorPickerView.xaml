<UserControl x:Class="Microsoft.Data.Visualization.VisualizationControls.ColorPickerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Microsoft.Data.Visualization.VisualizationControls"
             xmlns:graphics="clr-namespace:Microsoft.Data.Visualization.Engine.Graphics;assembly=VisualizationGraphics"
             xmlns:wpfEx="clr-namespace:Microsoft.Data.Visualization.WpfExtensions;assembly=WpfExtensions"
             Loaded="ColorPickerButton_Initialized">
    <FrameworkElement.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <x:Static Member="local:ChromelessWindowBase.StaticallyThemedTemplatesDictionary"/>
                <ResourceDictionary Source="..\Styles\MetroRibbon.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <local:Color4FToSolidColorBrushConverter x:Key="Color4FToSolidColorBrush"/>
            <local:ColorPickerButtonImageConverter x:Key="ColorPickerButtonImageConverter"/>
            <DataTemplate x:Key="ColorPickerColorTemplate" DataType="{x:Type graphics:Color4F}">
                <Border BorderThickness="1" BorderBrush="{DynamicResource CheckBoxFrames}">
                    <Rectangle Height="11" Width="11" Fill="{Binding Converter={StaticResource Color4FToSolidColorBrush}}"/>
                </Border>
            </DataTemplate>
            <Style x:Key="ColorPickerGalleryItemStyle" TargetType="{x:Type RibbonGalleryItem}">
                <Setter Property="AutomationProperties.Name" Value="{Binding Item2}"/>
                <Setter Property="FrameworkElement.ToolTip" Value="{Binding Item2}"/>
                <Setter Property="Control.Background" Value="Transparent"/>
                <Setter Property="Control.BorderBrush" Value="Transparent"/>
                <Setter Property="Control.BorderThickness" Value="1"/>
                <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="RibbonGalleryItem.MouseOverBackground" Value="{DynamicResource MetroHoverGreen}"/>
                <Setter Property="RibbonGalleryItem.MouseOverBorderBrush" Value="{DynamicResource MetroHoverGreen}"/>
                <Setter Property="RibbonGalleryItem.PressedBorderBrush" Value="{DynamicResource MetroPressedGreen}"/>
                <Setter Property="RibbonGalleryItem.PressedBackground" Value="{DynamicResource MetroPressedGreen}"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RibbonGalleryItem}">
                            <Grid x:Name="GalleryItemGrid">
                                <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                                    <Border x:Name="InnerBorder" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="1">
                                        <ContentControl x:Name="Content" ContentTemplate="{StaticResource ColorPickerColorTemplate}"
                                    Content="{Binding Item1}"/>
                                    </Border>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                                    <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="#80000000"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsMouseOver" Value="true">
                                    <Setter TargetName="OuterBorder"
                          Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder"
                          Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.BorderBrush"/>
                                    <Setter TargetName="InnerBorder"
                          Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="RibbonGalleryItem.IsSelected" Value="true">
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroSelectedGreen}" Property="Border.Background"/>
                                    <Setter TargetName="InnerBorder" Value="{DynamicResource MetroSelectedGreen}" Property="Border.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="RibbonGalleryItem.IsPressed" Value="true">
                                    <Setter TargetName="OuterBorder"
                          Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder"
                          Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.BorderBrush"/>
                                    <Setter TargetName="InnerBorder"
                          Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}"
                          Property="Border.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="Content" Property="UIElement.Opacity" Value="0.5"/>
                                    <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="#FF9E9E9E"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroBackground}" Property="Border.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                          Property="Border.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroBackground}" Property="Border.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                          Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroBackground}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                          Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                          Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroBackground}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                          Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                          Property="Border.Background"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                          Property="Border.BorderBrush"/>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                          Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsInControlGroup, RelativeSource={RelativeSource Self}}" Value="True"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource MetroBackground}" Property="Border.BorderBrush"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding HighContrast}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                          Property="TextElement.Foreground"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </FrameworkElement.Resources>
    <Grid>
        <RibbonMenuButton x:Name="ColorPickerButton" MouseOverBackground="{DynamicResource MetroHoverGreen}"
                      PressedBackground="{DynamicResource MetroPressedGreen}"
                      PressedBorderBrush="{DynamicResource MetroAppButtonHoverGreen}"
                      MouseOverBorderBrush="{DynamicResource CheckBoxFrames}"
                      FocusedBackground="{DynamicResource MetroHoverGreen}" CanAddToQuickAccessToolBarDirectly="false"
                      VerticalAlignment="Center" Padding="1" BorderThickness="1"
                      BorderBrush="{DynamicResource CheckBoxFrames}" KeyboardNavigation.AcceptsReturn="true"
                      AutomationProperties.Name="{x:Static local:Resources.Narrator_ColorPicker}"
                      AutomationProperties.AutomationId="ColorPickerButton"
                      AutomationProperties.HelpText="{x:Static local:Resources.LayerSettings_ColorPickerTooltip}"
                      SmallImageSource="{Binding SelectedColor, Converter={StaticResource ColorPickerButtonImageConverter}}">
            <RibbonGallery SelectionChanged="ColorPickerDropdownGallery_SelectionChanged"
                     Loaded="ColorPickerDropdownGallery_Loaded" x:Name="ColorPickerDropdownGallery"
                     CanAddToQuickAccessToolBarDirectly="false" SelectedValuePath="Item1" MinColumnCount="10"
                     MaxColumnCount="10" Background="{DynamicResource MetroBackground}"
                     ScrollViewer.VerticalScrollBarVisibility="Hidden"
                     GalleryItemStyle="{StaticResource ColorPickerGalleryItemStyle}"
                     GalleryItemTemplate="{StaticResource ColorPickerColorTemplate}"
                     SelectedValue="{Binding SelectedColor}">
                <Control.Template>
                    <ControlTemplate>
                        <StackPanel Orientation="Vertical">
                            <ItemsPresenter/>
                            <Button Padding="32 0 0 0" HorizontalContentAlignment="Left" BorderBrush="Transparent"
                      Content="{x:Static local:Resources.ColorPicker_MoreColorsLabel}"/>
                            <Button Padding="32 0 0 0" HorizontalContentAlignment="Left" BorderBrush="Transparent"
                      Content="{x:Static local:Resources.ColorPicker_ResetSelectedColorLabel}"
                      Command="{Binding ResetColorCommand}"/>
                        </StackPanel>
                    </ControlTemplate>
                </Control.Template>
                <RibbonGalleryCategory ItemsSource="{x:Static local:ColorPickerViewModel.Colors}"/>
            </RibbonGallery>
        </RibbonMenuButton>
    </Grid>
</UserControl>